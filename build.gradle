buildscript {
    ext {
        springBootVersion = "1.5.10.RELEASE"
        springCloudVersion = "Dalston.SR2"
        neverMvnRepoRrlBase = "http://140.143.248.15:8081/nexus/content"
    }
    repositories {
        maven { url "${neverMvnRepoRrlBase}/groups/public" }
        maven { url "http://repo.spring.io/libs-release" }
        maven { url "http://repo.spring.io/libs-snapshot" }
        maven { url "https://plugins.gradle.org/m2" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6'
    }
}
apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "maven-publish"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: 'org.sonarqube'

version = "0.0.6-SNAPSHOT"
group = "com.neverbug"
def prjArtifactId = "neverbug-common"
jar {
    baseName = prjArtifactId
}
def jdkVersion = 1.8
sourceCompatibility = jdkVersion
targetCompatibility = jdkVersion
compileJava {
    sourceCompatibility = jdkVersion
    targetCompatibility = jdkVersion
    options.compilerArgs = ['-parameters','-Xlint:unchecked']
    options.fork = true
    options.forkOptions.executable = 'javac'
}
sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
    }
}
repositories {
    maven { url "${neverMvnRepoRrlBase}/groups/public" }
    maven { url "http://repo.spring.io/libs-snapshot" }
    maven { url "http://repo.spring.io/libs-release" }
    maven { url "http://repo.spring.io/libs-milestone" }
    jcenter()
    mavenCentral()
}
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${springCloudVersion}"
    }
}
dependencies {
    compile "javax.servlet:javax.servlet-api:3.1.0"
    compile "org.springframework.boot:spring-boot-starter-jersey"
    compile "org.springframework.boot:spring-boot-starter-amqp"
    compile "org.springframework.cloud:spring-cloud-starter-eureka"
    compile "org.springframework.cloud:spring-cloud-starter-feign"
    compile "org.springframework.cloud:spring-cloud-config-client"
    compile "com.alibaba:fastjson:1.2.7"
    compile "com.wordnik:swagger-jersey2-jaxrs_2.11:1.3.12"
    compile "org.springframework.cloud:spring-cloud-sleuth-zipkin-stream"
    compile "org.springframework.cloud:spring-cloud-starter-sleuth"
    compile "org.springframework.cloud:spring-cloud-stream-binder-rabbit"
}
task commonJar(type: Jar) {
    from sourceSets.main.output
    exclude "**/demo/**", "**/static/**", "**/*.yml", "**/*.xml", "**/*.sql"

    manifest {
        attributes(
                "Created-By": "${System.getProperty('java.version')} (金色家园网络科技有限公司)",
                "Implementation-Version": project.version
        )
    }
}
task commonSourcesJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
    exclude "**/demo/**", "**/static/**", "**/*.yml", "**/*.xml", "**/*.sql"
    manifest {
        attributes(
                "Created-By": "${System.getProperty('java.version')} (金色家园网络科技有限公司)",
                "Implementation-Version": project.version
        )
    }
}

// 发布JAR包
publishing {
    publications {
        common(MavenPublication) {
            artifactId prjArtifactId
            from components.java
            artifacts.clear()
            artifacts = [commonJar,commonSourcesJar]
        }
        all {
            pom.withXml {
                Node depsNode = asNode()
                depsNode.dependencies."*".findAll() {
                    it.scope.text() == "runtime" && project.configurations.compile.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each {
                    it.scope*.value = "compile"
                }
            }
        }
    }
    repositories {
        maven {
            url "${neverMvnRepoRrlBase}/repositories/neverbug-${project.version.endsWith('-SNAPSHOT') ? 'snapshot' : 'release'}"
            credentials {
                username = "admin"
                password = "adminxie"
            }
        }
    }
}
eclipse {
    classpath {
        containers.remove("org.eclipse.jdt.launching.JRE_CONTAINER")
        containers "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"
    	downloadSources = true
        downloadJavadoc = false
    }
}
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
task wrapper(type: Wrapper) {
    gradleVersion = "2.9"
}
